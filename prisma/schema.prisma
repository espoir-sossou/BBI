// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id         Int            @id @default(autoincrement())
  nom             String?
  prenom          String?
  username        String?
  sexe            String?
  email           String         @unique
  password        String
  role            String? // 'Admin', 'Agent', 'Acheteur', 'Vendeur'
  telephone       String?
  adresse         String?

  AnnonceAssignedAdmins        Annonce[] @relation("AnnonceAssignedAdmin")

}
model Annonce {
  annonce_id        Int      @id @default(autoincrement())
  titre             String
  description       String
  typePropriete     String
  montant           Float
  superficie        Float
  nbChambres        Int
  nbSalleDeDouche   Int
  veranda           Boolean
  terrasse          Boolean
  cuisine           Boolean
  dependance        Boolean
  piscine           Boolean
  garage            Boolean
  localite          String
  titreFoncier      Boolean
  localisation      String
  details           String?
  typeTransaction   String // Vente ou Location
  visite360         String?
  dateCreation      DateTime @default(now())
  validee           Boolean @default(false)
  video             String?

  // Relations
  photos            Photo[]  // Relation avec le modèle Photo
  assigned_admin_id Int?

  assigned_admin    User? @relation("AnnonceAssignedAdmin", fields: [assigned_admin_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
}


model Photo {
  photo_id   Int     @id @default(autoincrement())
  url        String  // URL de la photo
  annonce_id Int
  annonce    Annonce @relation(fields: [annonce_id], references: [annonce_id], onDelete: Cascade)

  createdAt  DateTime @default(now())
}


model Message {
  id             Int      @id @default(autoincrement())
  contenu        String
  dateEnvoi      DateTime @default(now())
  expediteurId   Int
  destinataireId Int
  
}

model Notification {
  id        Int      @id @default(autoincrement())
  contenu   String
  type      String // Types comme 'Alerte', 'Message de Sécurité'
  dateEnvoi DateTime @default(now())
  userId    Int
}

model Facture {
  id           Int      @id @default(autoincrement())
  montant      Float
  dateCreation DateTime @default(now())
  status       String   @default("en attente") // 'en attente', 'payée', 'annulée'
  annonceId    Int
  userId       Int
}
